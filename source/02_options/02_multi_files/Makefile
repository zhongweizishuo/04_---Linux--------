src  := $(shell ls *.c)
objs := $(patsubst %.c,%.o,$(src))

test: $(objs)
	gcc -o $@ $^

%.o:%.c
	gcc -c -o $@ $<
	
# 这是一个基本的 `makefile` 文件，用于自动化编译源代码文件（`.c` 文件）为可执行文件。下面是对每一行代码的逐行解释：
# 1. `src := $(shell ls *.c)`
#    - 这一行使用 `shell` 函数执行 `ls *.c` 命令，将当前目录下所有的 `.c` 文件的文件名（包含扩展名）保存到变量 `src` 中。
# 2. `objs := $(patsubst %.c,%.o,$(src))`
#    - 这一行使用 `patsubst` 函数将变量 `src` 中的所有 `.c` 文件名替换为相应的 `.o` 文件名，并保存到变量 `objs` 中。
# 例如，如果 `src` 包含 `main.c`，则 `objs` 将包含 `main.o`。
# 3. `test: $(objs)`
#    - 这一行定义了一个名为 `test` 的目标（target），它依赖于变量 `objs` 中指定的所有 `.o` 文件。
# 在 `make` 命令中，你可以通过执行 `make test` 来编译这些文件。
# 4. `gcc -o $@ $^`
#    - 这一行表示生成目标文件 `test` 的命令。`$@` 代表目标文件名，`$^` 代表所有的依赖文件（即变量 `objs` 中的所有 `.o` 文件）。
# 该命令使用 `gcc` 编译器将所有 `.o` 文件链接在一起生成可执行文件 `test`。

# 5. `%.o:%.c`
#    - 这一行定义了一个规则，表示如何将 `.c` 文件编译成对应的 `.o` 文件。`%` 是通配符，表示任意文件名。
# 例如，`main.o` 对应 `main.c`。`$<` 代表第一个依赖文件（即 `.c` 文件），`$@` 代表目标文件（即生成的 `.o` 文件）。

# 这个 `makefile` 文件的作用是，它会自动查找当前目录下的所有 `.c` 文件，将它们编译成相应的 `.o` 文件，并最终链接在一起生成可执行文件 `test`。


# 清除test 与所有的.o文件
clean:
	rm -f test *.o		
